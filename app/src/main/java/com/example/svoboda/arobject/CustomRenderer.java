package com.example.svoboda.arobject;

import android.graphics.Bitmap;
import android.opengl.GLES20;
import android.opengl.GLUtils;
import android.opengl.Matrix;


import com.example.svoboda.util.ShaderUtil;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class CustomRenderer extends BaseRenderer {

    private static final String VERTEX_SHADER_SRC =
                    "attribute vec4 a_position;\n" +
                    "attribute vec2 a_texCoord;\n" +
                    "varying vec2 v_texCoord;\n" +
                    "uniform mat4 u_mvpMatrix;\n" +
                    "void main()							\n" +
                    "{										\n" +
                    "	gl_Position = u_mvpMatrix * a_position;\n" +
                    "	v_texCoord = a_texCoord; 			\n" +
                    "}										\n";

    private static final String FRAGMENT_SHADER_SRC =
                    "precision mediump float;\n" +
                    "varying vec2 v_texCoord;\n" +
                    "uniform sampler2D u_texture;\n" +
                    "void main(void)\n" +
                    "{\n" +
                    "	gl_FragColor = texture2D(u_texture, v_texCoord);\n" +
                    "}\n";


    private static float[] VERTEX_BUF = {
            6.887818f, 2.53286f, 0.526844f, 7.184333f, 1.991754f, 0.351866f, 6.88782f, 1.991754f, 0.419212f, 7.184333f, 3.039207f, 0.785735f, 7.184333f, 2.558631f, 0.464625f, 6.88782f, 2.991587f, 0.833356f, 7.184333f, 3.360317f, 1.266311f, 6.887819f, 3.405731f, 1.833189f, 6.88782f, 3.298099f, 1.292083f, 6.88782f, 3.2981f, 2.374294f, 7.184333f, 3.473077f, 1.833188f, 6.887819f, 2.991586f, 2.833022f, 7.184333f, 3.360317f, 2.400067f, 6.887819f, 2.53286f, 3.139533f, 7.184333f, 3.039207f, 2.880641f, 6.887819f, 1.991755f, 3.247167f, 7.184333f, 2.558631f, 3.201751f, 6.887818f, 1.450649f, 3.139533f, 7.184333f, 1.991754f, 3.314512f, 7.184333f, 0.944301f, 2.880641f, 7.184333f, 1.424877f, 3.201751f, 6.887818f, 0.68541f, 2.374294f, 6.887818f, 0.991921f, 2.833023f, 6.887818f, 0.577777f, 1.833189f, 7.184333f, 0.62319f, 2.400067f, 6.887818f, 0.685409f, 1.292083f, 7.184333f, 0.510431f, 1.833189f, 6.88782f, 0.991921f, 0.833355f, 7.184333f, 0.623191f, 1.266311f, 6.88782f, 1.450649f, 0.526844f, 7.184333f, 0.944301f, 0.785735f, 7.184334f, 1.424877f, 0.464625f, 2.426863f, 1.991754f, 1.304508f, 5.683723f, 1.789438f, 1.344753f, 2.426863f, 1.789438f, 1.344753f, 2.426863f, 1.617921f, 1.459355f, 5.683723f, 1.617922f, 1.459356f, 2.426863f, 1.503318f, 1.630872f, 5.683723f, 1.503318f, 1.630872f, 2.426863f, 1.463075f, 1.833189f, 5.683723f, 1.463075f, 1.833189f, 5.683723f, 1.503318f, 2.035505f, 2.426863f, 1.503318f, 2.035506f, 5.683722f, 1.617922f, 2.207021f, 2.426863f, 1.617921f, 2.20702f, 2.426863f, 1.789438f, 2.321624f, 5.683722f, 1.789438f, 2.321625f, 5.683722f, 1.991755f, 2.361869f, 2.426863f, 1.991754f, 2.361867f, 2.426863f, 2.194071f, 2.321624f, 5.683722f, 2.194071f, 2.321625f, 2.426863f, 2.365587f, 2.20702f, 5.683722f, 2.365587f, 2.207021f, 5.683721f, 2.48019f, 2.035505f, 2.426863f, 2.48019f, 2.035505f, 5.683723f, 2.520433f, 1.833188f, 2.426863f, 2.520433f, 1.833189f, 5.683723f, 2.48019f, 1.630872f, 2.426863f, 2.48019f, 1.630872f, 5.683721f, 2.365587f, 1.459356f, 2.426863f, 2.365587f, 1.459355f, 2.426863f, 2.194071f, 1.344753f, 5.683721f, 2.194071f, 1.344752f, 5.683723f, 1.991754f, 1.304509f, 6.387919f, 1.663207f, 1.040003f, 6.635783f, 1.991754f, 0.979564f, 6.635781f, 1.665087f, 1.044542f, 6.387919f, 1.384677f, 1.226111f, 6.635783f, 1.38815f, 1.229585f, 6.387919f, 1.198569f, 1.504641f, 6.635781f, 1.203108f, 1.50652f, 6.635781f, 1.13813f, 1.833188f, 6.387919f, 1.133217f, 1.833189f, 6.387918f, 1.198569f, 2.161736f, 6.635781f, 1.203108f, 2.159857f, 6.635781f, 1.388151f, 2.436791f, 6.387918f, 1.384677f, 2.440265f, 6.635782f, 1.665086f, 2.621835f, 6.387918f, 1.663206f, 2.626373f, 6.635782f, 1.991754f, 2.686814f, 6.387918f, 1.991755f, 2.691725f, 6.387918f, 2.320302f, 2.626373f, 6.635782f, 2.318422f, 2.621835f, 6.635781f, 2.595357f, 2.436791f, 6.387918f, 2.598832f, 2.440265f, 6.387918f, 2.784939f, 2.161736f, 6.635781f, 2.780399f, 2.159857f, 6.635781f, 2.845379f, 1.833189f, 6.387919f, 2.850291f, 1.833188f, 6.387919f, 2.784939f, 1.504641f, 6.635781f, 2.780399f, 1.506521f, 6.635781f, 2.595357f, 1.229585f, 6.387919f, 2.598831f, 1.226111f, 6.635781f, 2.318422f, 1.044543f, 6.387919f, 2.320302f, 1.040004f, 6.387919f, 1.991754f, 0.974652f, 6.764496f, 1.51812f, 0.689731f, 6.764496f, 1.11659f, 0.958024f, 6.764496f, 0.848297f, 1.359553f, 6.764497f, 0.754085f, 1.833188f, 6.764496f, 0.848297f, 2.306823f, 6.764496f, 1.11659f, 2.708353f, 6.764496f, 1.518119f, 2.976645f, 6.764496f, 1.991755f, 3.070858f, 6.764496f, 2.46539f, 2.976645f, 6.764496f, 2.866919f, 2.708352f, 6.764496f, 3.135211f, 2.306823f, 6.764496f, 3.229424f, 1.833188f, 6.764496f, 3.135211f, 1.359553f, 6.764496f, 2.866919f, 0.958024f, 6.764497f, 2.465389f, 0.689732f, 6.764497f, 1.991754f, 0.59552f, -2.330605f, 1.991754f, 0.351865f, -2.034091f, 2.53286f, 0.526843f, -2.034091f, 1.991754f, 0.419211f, -2.330605f, 2.558631f, 0.464624f, -2.034091f, 2.991587f, 0.833355f, -2.330605f, 3.039207f, 0.785734f, -2.034091f, 3.298099f, 1.292082f, -2.330605f, 3.360318f, 1.26631f, -2.034091f, 3.405731f, 1.833188f, -2.330605f, 3.473077f, 1.833188f, -2.034092f, 3.298099f, 2.374293f, -2.330605f, 3.360318f, 2.400066f, -2.034092f, 2.991587f, 2.833021f, -2.330606f, 3.039207f, 2.880641f, -2.034092f, 2.53286f, 3.139532f, -2.330606f, 2.558631f, 3.201751f, -2.034092f, 1.991754f, 3.247165f, -2.330606f, 1.424877f, 3.201753f, -2.034092f, 1.450649f, 3.139532f, -2.330606f, 0.944301f, 2.880641f, -2.034092f, 0.991922f, 2.833021f, -2.034092f, 0.68541f, 2.374294f, -2.330605f, 0.623191f, 2.400066f, -2.034091f, 0.577777f, 1.833188f, -2.330605f, 0.62319f, 1.26631f, -2.034091f, 0.685409f, 1.292082f, -2.034091f, 0.991922f, 0.833355f, -2.330605f, 0.944301f, 0.785734f, -2.034091f, 1.450649f, 0.526843f, -2.330605f, 1.424877f, 0.464624f, -0.829994f, 1.789438f, 1.344752f, -0.829994f, 1.617922f, 1.459355f, -0.829994f, 1.503318f, 1.630871f, -0.829995f, 1.463075f, 1.833188f, -0.829995f, 1.503318f, 2.035505f, -0.829995f, 1.789437f, 2.321624f, -0.829995f, 1.991754f, 2.361867f, -0.829995f, 2.194071f, 2.321624f, -0.829995f, 2.365587f, 2.20702f, -0.829995f, 2.520433f, 1.833188f, -0.829994f, 2.48019f, 1.630871f, -0.829994f, 2.194071f, 1.344752f, -0.829994f, 1.991754f, 1.304508f, -1.534191f, 1.663207f, 1.040003f, -1.782054f, 1.991754f, 0.979563f, -1.534191f, 1.991754f, 0.974651f, -1.782054f, 1.388151f, 1.229584f, -1.534191f, 1.384677f, 1.22611f, -1.534191f, 1.198569f, 1.50464f, -1.534191f, 1.133217f, 1.833188f, -1.782054f, 1.203108f, 1.50652f, -1.534191f, 1.198569f, 2.161736f, -1.782054f, 1.13813f, 1.833188f, -1.782055f, 1.388151f, 2.436792f, -1.534192f, 1.384677f, 2.440266f, -1.782055f, 1.665086f, 2.621834f, -1.534192f, 1.663206f, 2.626373f, -1.782055f, 1.991754f, 2.686812f, -1.534192f, 1.991754f, 2.691725f, -1.534192f, 2.320302f, 2.626372f, -1.782055f, 2.595357f, 2.436791f, -1.534192f, 2.598832f, 2.440265f, -1.782055f, 2.780399f, 2.159856f, -1.534191f, 2.784939f, 2.161736f, -1.782054f, 2.845379f, 1.833188f, -1.534191f, 2.850291f, 1.833188f, -1.782054f, 2.780399f, 1.50652f, -1.53419f, 2.784939f, 1.50464f, -1.782054f, 2.595357f, 1.229584f, -1.53419f, 2.598832f, 1.22611f, -1.53419f, 2.320302f, 1.040003f, -1.910769f, 1.518119f, 0.689731f, -1.910768f, 1.991754f, 0.595519f, -1.910769f, 1.11659f, 0.958024f, -1.910768f, 0.848297f, 1.359552f, -1.910768f, 0.754085f, 1.833188f, -1.910769f, 0.848297f, 2.306822f, -1.910768f, 1.11659f, 2.708352f, -1.910768f, 1.518119f, 2.976645f, -1.910768f, 1.991754f, 3.070857f, -1.910768f, 2.46539f, 2.976645f, -1.910768f, 2.866919f, 2.708352f, -1.910768f, 3.135211f, 2.306822f, -1.910768f, 3.229424f, 1.833188f, -1.910768f, 3.135211f, 1.359552f, -1.910768f, 2.866919f, 0.958024f, -1.910768f, 2.46539f, 0.689731f, -1.782054f, 2.318422f, 1.044542f, -1.782055f, 2.318422f, 2.621834f, -1.782055f, 1.203108f, 2.159856f, -1.782054f, 1.665087f, 1.044542f, -0.829994f, 2.365587f, 1.459355f, -0.829995f, 2.48019f, 2.035505f, -0.829995f, 1.617921f, 2.207021f, -2.330606f, 1.991754f, 3.31451f, -2.330605f, 0.510431f, 1.833188f, -2.330605f, 1.2986f, 1.072759f, -2.330605f, 2.728915f, 1.072759f, -2.64878f, 2.728915f, 2.503074f, -2.330605f, 2.728915f, 2.503074f, -2.330605f, 1.2986f, 2.120302f, -3.305318f, 1.2986f, 2.503074f, -3.305318f, 1.2986f, 1.072759f, -2.64878f, 2.728915f, 1.072759f, -2.330605f, 1.2986f, 2.503074f
    };

    private static short[] INDEX_BUF = {
            0, 1, 2, 0, 3, 4, 5, 6, 3, 7, 6, 8, 9, 10, 7, 11, 12, 9, 13, 14, 11, 15, 16, 13, 17, 18, 15, 17, 19, 20, 21, 19, 22, 23, 24, 21, 25, 26, 23, 27, 28, 25, 10, 18, 26, 29, 30, 27, 29, 1, 31, 32, 33, 34, 35, 33, 36, 37, 36, 38, 39, 38, 40, 39, 41, 42, 42, 43, 44, 45, 43, 46, 45, 47, 48, 49, 47, 50, 51, 50, 52, 51, 53, 54, 54, 55, 56, 56, 57, 58, 58, 59, 60, 61, 59, 62, 61, 63, 32, 64, 65, 66, 67, 66, 68, 69, 68, 70, 69, 71, 72, 73, 71, 74, 73, 75, 76, 76, 77, 78, 78, 79, 80, 81, 79, 82, 81, 83, 84, 85, 83, 86, 85, 87, 88, 89, 87, 90, 89, 91, 92, 92, 93, 94, 94, 65, 95, 96, 2, 29, 97, 29, 27, 98, 27, 25, 98, 23, 99, 100, 23, 21, 100, 22, 101, 101, 17, 102, 102, 15, 103, 103, 13, 104, 104, 11, 105, 105, 9, 106, 106, 7, 107, 108, 7, 8, 108, 5, 109, 109, 0, 110, 110, 2, 111, 93, 111, 65, 93, 109, 110, 90, 109, 91, 87, 108, 90, 87, 106, 107, 83, 106, 86, 83, 104, 105, 82, 103, 104, 77, 103, 79, 75, 102, 77, 74, 101, 75, 74, 99, 100, 70, 99, 71, 70, 97, 98, 68, 96, 97, 65, 96, 66, 63, 94, 95, 59, 94, 62, 59, 89, 92, 55, 89, 57, 55, 85, 88, 52, 85, 53, 52, 81, 84, 47, 81, 50, 46, 80, 47, 43, 78, 46, 41, 76, 43, 40, 73, 41, 40, 69, 72, 36, 69, 38, 36, 64, 67, 63, 64, 33, 112, 113, 114, 115, 116, 113, 117, 118, 116, 119, 120, 118, 121, 122, 120, 123, 124, 122, 125, 126, 124, 127, 128, 126, 128, 129, 130, 130, 131, 132, 131, 133, 132, 134, 135, 133, 135, 136, 137, 136, 138, 137, 139, 140, 138, 141, 114, 140, 45, 42, 34, 142, 32, 34, 143, 34, 35, 144, 35, 37, 145, 37, 39, 146, 39, 42, 44, 146, 42, 147, 44, 45, 148, 45, 48, 149, 48, 49, 150, 49, 51, 54, 150, 51, 151, 54, 56, 152, 56, 58, 60, 152, 58, 153, 60, 61, 154, 61, 32, 155, 156, 157, 158, 155, 159, 160, 158, 159, 161, 162, 160, 163, 164, 161, 165, 163, 166, 167, 166, 168, 169, 168, 170, 171, 169, 170, 172, 171, 173, 174, 173, 175, 176, 175, 177, 178, 177, 179, 180, 179, 181, 182, 180, 181, 156, 182, 157, 183, 114, 184, 185, 140, 183, 186, 138, 185, 135, 186, 187, 188, 135, 187, 132, 188, 189, 130, 189, 190, 128, 190, 191, 126, 191, 192, 124, 192, 193, 122, 193, 194, 195, 122, 194, 196, 120, 195, 116, 196, 197, 198, 116, 197, 184, 113, 198, 184, 199, 156, 199, 197, 180, 197, 178, 180, 196, 176, 178, 176, 194, 174, 194, 172, 174, 193, 200, 172, 192, 169, 200, 169, 190, 167, 167, 189, 165, 189, 201, 165, 201, 187, 164, 187, 162, 164, 186, 158, 162, 185, 202, 158, 183, 156, 202, 154, 182, 153, 153, 181, 203, 181, 152, 203, 179, 151, 152, 177, 204, 151, 204, 173, 150, 173, 149, 150, 149, 170, 148, 170, 147, 148, 168, 205, 147, 205, 163, 146, 163, 145, 146, 145, 160, 144, 160, 143, 144, 143, 155, 142, 142, 157, 154, 0, 4, 1, 0, 5, 3, 5, 8, 6, 7, 10, 6, 9, 12, 10, 11, 14, 12, 13, 16, 14, 15, 18, 16, 17, 20, 18, 17, 22, 19, 21, 24, 19, 23, 26, 24, 25, 28, 26, 27, 30, 28, 1, 4, 10, 4, 3, 10, 3, 6, 10, 10, 12, 14, 14, 16, 10, 16, 18, 10, 18, 20, 19, 19, 24, 26, 26, 28, 1, 28, 30, 1, 30, 31, 1, 18, 19, 26, 1, 10, 26, 29, 31, 30, 29, 2, 1, 32, 63, 33, 35, 34, 33, 37, 35, 36, 39, 37, 38, 39, 40, 41, 42, 41, 43, 45, 44, 43, 45, 46, 47, 49, 48, 47, 51, 49, 50, 51, 52, 53, 54, 53, 55, 56, 55, 57, 58, 57, 59, 61, 60, 59, 61, 62, 63, 64, 95, 65, 67, 64, 66, 69, 67, 68, 69, 70, 71, 73, 72, 71, 73, 74, 75, 76, 75, 77, 78, 77, 79, 81, 80, 79, 81, 82, 83, 85, 84, 83, 85, 86, 87, 89, 88, 87, 89, 90, 91, 92, 91, 93, 94, 93, 65, 96, 111, 2, 97, 96, 29, 98, 97, 27, 98, 25, 23, 100, 99, 23, 100, 21, 22, 101, 22, 17, 102, 17, 15, 103, 15, 13, 104, 13, 11, 105, 11, 9, 106, 9, 7, 108, 107, 7, 108, 8, 5, 109, 5, 0, 110, 0, 2, 93, 110, 111, 93, 91, 109, 90, 108, 109, 87, 107, 108, 87, 86, 106, 83, 105, 106, 83, 82, 104, 82, 79, 103, 77, 102, 103, 75, 101, 102, 74, 100, 101, 74, 71, 99, 70, 98, 99, 70, 68, 97, 68, 66, 96, 65, 111, 96, 63, 62, 94, 59, 92, 94, 59, 57, 89, 55, 88, 89, 55, 53, 85, 52, 84, 85, 52, 50, 81, 47, 80, 81, 46, 78, 80, 43, 76, 78, 41, 73, 76, 40, 72, 73, 40, 38, 69, 36, 67, 69, 36, 33, 64, 63, 95, 64, 112, 115, 113, 115, 117, 116, 117, 119, 118, 119, 121, 120, 121, 123, 122, 123, 125, 124, 125, 127, 126, 127, 206, 128, 128, 206, 129, 130, 129, 131, 131, 134, 133, 134, 207, 135, 135, 207, 136, 136, 139, 138, 139, 141, 140, 141, 112, 114, 34, 32, 58, 32, 61, 58, 61, 60, 58, 58, 56, 54, 54, 51, 49, 49, 48, 45, 45, 44, 42, 42, 39, 37, 37, 35, 42, 35, 34, 42, 58, 54, 34, 54, 49, 34, 49, 45, 34, 142, 154, 32, 143, 142, 34, 144, 143, 35, 145, 144, 37, 146, 145, 39, 44, 205, 146, 147, 205, 44, 148, 147, 45, 149, 148, 48, 150, 149, 49, 54, 204, 150, 151, 204, 54, 152, 151, 56, 60, 203, 152, 153, 203, 60, 154, 153, 61, 155, 202, 156, 158, 202, 155, 160, 162, 158, 161, 164, 162, 163, 201, 164, 165, 201, 163, 167, 165, 166, 169, 167, 168, 171, 200, 169, 172, 200, 171, 174, 172, 173, 176, 174, 175, 178, 176, 177, 180, 178, 179, 182, 199, 180, 156, 199, 182, 183, 140, 114, 185, 138, 140, 186, 137, 138, 135, 137, 186, 188, 133, 135, 132, 133, 188, 130, 132, 189, 128, 130, 190, 126, 128, 191, 124, 126, 192, 122, 124, 193, 195, 120, 122, 196, 118, 120, 116, 118, 196, 198, 113, 116, 184, 114, 113, 184, 198, 199, 199, 198, 197, 197, 196, 178, 196, 195, 176, 176, 195, 194, 194, 193, 172, 193, 192, 200, 192, 191, 169, 169, 191, 190, 167, 190, 189, 189, 188, 201, 201, 188, 187, 187, 186, 162, 186, 185, 158, 185, 183, 202, 183, 184, 156, 154, 157, 182, 153, 182, 181, 181, 179, 152, 179, 177, 151, 177, 175, 204, 204, 175, 173, 173, 171, 149, 149, 171, 170, 170, 168, 147, 168, 166, 205, 205, 166, 163, 163, 161, 145, 145, 161, 160, 160, 159, 143, 143, 159, 155, 142, 155, 157, 208, 209, 112, 209, 210, 211, 212, 213, 214, 208, 215, 209, 216, 210, 213, 123, 121, 211, 209, 117, 115, 115, 112, 209, 112, 141, 208, 141, 139, 208, 139, 136, 208, 136, 207, 212, 207, 134, 212, 212, 208, 136, 209, 215, 210, 214, 208, 212, 212, 216, 213, 208, 214, 215, 216, 211, 210, 117, 209, 119, 209, 211, 121, 119, 209, 121, 216, 212, 134, 216, 134, 131, 211, 216, 206, 216, 131, 129, 206, 216, 129, 206, 127, 211, 127, 125, 211, 125, 123, 211, 210, 214, 213, 210, 215, 214
    };
    private static float[] TEXTURE_COORD_BUF = {
            0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.140508f, 0.34623f, 0.140508f, 0.34623f, 0.0f, 0.0f, 0.0f, 0.0f, 0.51549f, 0.997439f, 0.127667f, 0.996487f, 0.512706f, 0.342182f, 0.0f, 0.0f, 0.51549f, 0.997439f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    public CustomRenderer() {
        super();
        ByteBuffer bb = ByteBuffer.allocateDirect(VERTEX_BUF.length * Float.SIZE / 8);
        bb.order(ByteOrder.nativeOrder());
        vertexBuffer = bb.asFloatBuffer();
        vertexBuffer.put(VERTEX_BUF);
        vertexBuffer.position(0);

        bb = ByteBuffer.allocateDirect(INDEX_BUF.length * Integer.SIZE / 8);
         bb.order(ByteOrder.nativeOrder());
        indexBuffer = bb.asShortBuffer();
        indexBuffer.put(INDEX_BUF);
        indexBuffer.position(0);

        bb = ByteBuffer.allocateDirect(TEXTURE_COORD_BUF.length * Float.SIZE / 8);
        bb.order(ByteOrder.nativeOrder());
        textureCoordBuff = bb.asFloatBuffer();
        textureCoordBuff.put(TEXTURE_COORD_BUF);
        textureCoordBuff.position(0);

        shaderProgramId = ShaderUtil.createProgram(VERTEX_SHADER_SRC, FRAGMENT_SHADER_SRC);

        positionHandle = GLES20.glGetAttribLocation(shaderProgramId, "a_position");
        textureCoordHandle = GLES20.glGetAttribLocation(shaderProgramId, "a_texCoord");
        mvpMatrixHandle = GLES20.glGetUniformLocation(shaderProgramId, "u_mvpMatrix");
        textureHandle = GLES20.glGetUniformLocation(shaderProgramId, "u_texture");

        textureNames = new int[1];

        GLES20.glGenTextures(1, textureNames, 0);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureNames[0]);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
    }

    @Override
    public void draw() {
        GLES20.glUseProgram(shaderProgramId);

        GLES20.glEnableVertexAttribArray(positionHandle);

        GLES20.glVertexAttribPointer(positionHandle, 3, GLES20.GL_FLOAT, false,
                0, vertexBuffer);

        GLES20.glEnableVertexAttribArray(textureCoordHandle);

        GLES20.glVertexAttribPointer(textureCoordHandle, 2, GLES20.GL_FLOAT, false,
                0, textureCoordBuff);

        Matrix.setIdentityM(modelMatrix, 0);
        Matrix.multiplyMM(modelMatrix, 0, translation, 0, rotation, 0);
        Matrix.multiplyMM(modelMatrix, 0, modelMatrix, 0, scale, 0);
        Matrix.multiplyMM(modelMatrix, 0, transform, 0, modelMatrix, 0);


        Matrix.multiplyMM(localMvpMatrix, 0, projectionMatrix, 0, modelMatrix, 0);
        GLES20.glUniformMatrix4fv(mvpMatrixHandle, 1, false, localMvpMatrix, 0);

        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
        GLES20.glUniform1i(textureHandle, 0);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureNames[0]);

        GLES20.glEnable(GLES20.GL_DEPTH_TEST);
        GLES20.glDrawElements(GLES20.GL_TRIANGLES, INDEX_BUF.length,
                GLES20.GL_UNSIGNED_SHORT, indexBuffer);

        GLES20.glDisableVertexAttribArray(positionHandle);
        GLES20.glDisableVertexAttribArray(textureCoordHandle);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);

        GLES20.glDisable(GLES20.GL_DEPTH_TEST);
    }

    public void setTextureBitmap(Bitmap texture) {
        android.graphics.Matrix matrix = new android.graphics.Matrix();
        matrix.postRotate(270);

        Bitmap rotatedBitmap = Bitmap.createBitmap(texture, 0, 0, texture.getWidth(), texture.getHeight(), matrix, true);
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureNames[0]);
        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, rotatedBitmap, 0);
        texture.recycle();
    }
}
